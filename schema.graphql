enum DealType {
  Order
  Bid
}

enum ContractType {
  ExchangeV2
  ERC721Factory
  ERC721Proxy
  ERC1155Factory
  ERC1155Proxy
  NFTTransferProxies
  Royalties
}
enum SellStatus {
	AskNew
	AskCancel
	Trade
	AcceptBid
	Bid
	CancelBid
}

enum EventType {
	Mint
	Transfer
	Trade
	AcceptBid
	AskNew
	AskCancel
	Bid
	CancelBid
}

type Account @entity {
	id: String!
	asERC1155: ERC1155Contract
	ERC1155balances: [ERC1155Balance!]! @derivedFrom(field: "account")
	ERC1155transferFromEvent: [ERC1155Transfer!]! @derivedFrom(field: "from")
	ERC1155transferToEvent: [ERC1155Transfer!]! @derivedFrom(field: "to")
	events: [Event!]! @derivedFrom(field: "emitter")
  	asERC721: ERC721Contract
	ERC721tokens: [ERC721Token!]! @derivedFrom(field: "owner")
	ERC721transferFromEvent: [ERC721Transfer!]! @derivedFrom(field: "from")
	ERC721transferToEvent: [ERC721Transfer!]! @derivedFrom(field: "to")
	OwnedTokens: [OwnedTokenCount!] @derivedFrom(field: "owner")
	OnSaleStatus1155: [OnSaleStatus1155!] @derivedFrom(field: "owner")
	onSaleCount: BigInt!
	holdingCount: BigInt!
}

type OwnedTokenCount @entity {
    id: ID!
    contract: String!
    owner: Account!
	count: BigInt!
	timestamp: BigInt!
}

type AccountCollectionOwnership @entity {
    id: ID!
    account: Account!
    contract: String!
    ownsTokens: Boolean!
}

type  OnSaleStatus1155 @entity {
	id: ID!
	contract: String!
	tokenId: BigInt!
	owner: Account!
	isOnSale: Boolean!
}

type ERC721Contract @entity {
	id: String!
	asAccount: Account!
	supportsMetadata: Boolean
	name: String
	symbol: String
	tokens: [ERC721Token!]! @derivedFrom(field: "contract")
	transfers: [ERC721Transfer!]! @derivedFrom(field: "contract")
	txCreation: String!
	count: BigInt!
	holderCount: BigInt!
	createAt: BigInt
	volume: BigInt!
	transactionCount: BigInt!
}
type ERC721Token @entity {
	id: ID!
	tokenId: String!
	contract: ERC721Contract!
	identifier: BigInt!
	owner: Account!
	approval: Account!
	uri: String
	transfers: [ERC721Transfer!]! @derivedFrom(field: "token")
  	creators: [ERC721Creator!]! @derivedFrom(field: "collection")
	txCreation: String!
	createAt: BigInt
}
type ERC721Transfer implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: ERC721Contract!
	token: ERC721Token!
	from: Account!
	to: Account!
}

type ERC1155Contract @entity {
	id: String!
	asAccount: Account!
	name: String
	symbol: String
	tokens: [ERC1155Token!]! @derivedFrom(field: "contract")
	balances: [ERC1155Balance!]! @derivedFrom(field: "contract")
	transfers: [ERC1155Transfer!]! @derivedFrom(field: "contract")
	txCreation: String!
	count: BigInt!
	holderCount: BigInt!
	createAt: BigInt
	volume: BigInt!
	transactionCount: BigInt!
}

type ERC1155Creator @entity {
  id: ID! # Combination of collectionId and creatorId
  collection: ERC1155Token!
  creator: Creator!
  share: BigInt! # The creator's share in the collection
}
type ERC721Creator @entity {
  id: ID! # Combination of collectionId and creatorId
  collection: ERC721Token!
  creator: Creator!
  share: BigInt! # The creator's share in the collection
}

type Creator @entity {
  id: ID!
  token1155: [ERC1155Creator!] @derivedFrom(field: "creator")
  token721: [ERC721Creator!] @derivedFrom(field: "creator")
}

type ERC1155Token @entity {
	id: ID!
	tokenId: String!
	contract: ERC1155Contract!
	identifier: BigInt!
	uri: String
	totalSupply: ERC1155Balance!
	balances: [ERC1155Balance!]! @derivedFrom(field: "token")
	transfers: [ERC1155Transfer!]! @derivedFrom(field: "token")
  	creators: [ERC1155Creator!]! @derivedFrom(field: "collection")
	txCreation: String!
	createAt: BigInt
}
type ERC1155Balance @entity {
	id: ID!
	contract: ERC1155Contract
	token: ERC1155Token!
	account: Account
	value: BigDecimal!
	valueExact: BigInt!
	transferFromEvent: [ERC1155Transfer!]! @derivedFrom(field: "fromBalance")
	transferToEvent: [ERC1155Transfer!]! @derivedFrom(field: "toBalance")
}
type ERC1155Transfer implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: ERC1155Contract!
	token: ERC1155Token!
	# operator: Account!
	from: Account
	fromBalance: ERC1155Balance
	to: Account
	toBalance: ERC1155Balance
	value: BigDecimal!
	valueExact: BigInt!
}
interface Event {
	id: ID!
	transaction: Transaction!
	emitter: Account!
	timestamp: BigInt!
}
type Transaction @entity(immutable: true) {
	id: ID!
	timestamp: BigInt!
	blockNumber: BigInt!
	events: [Event!]! @derivedFrom(field: "transaction")
}

type MarketEvent721 @entity {
	id: ID!
	txHash: String!
	event: SellStatus! # action type
	address: String!
	nftId: ERC721Token
	from: String
	to: String
	metadata: String
	timestamp: BigInt!
	price: BigInt
	netPrice: BigInt
	quoteToken: String
}

type MarketEvent1155 @entity {
  id: ID!
  txHash: String
  event: SellStatus! # Action type, like "AskNew", "Trade", etc.
  operation: Operation!
  address: String # Address of the ERC1155 contract
  nftId: ERC1155Token # Token ID in ERC1155
  from: String # Address of the sender
  to: String
  timestamp: BigInt!
  price: BigInt # Price per unit
  netPrice: BigInt
  quoteToken: String # Address of the quote token (e.g., WETH, ERC20)
  quantity: BigInt! # Number of tokens involved in the transaction
  operationId: BigInt # For ERC1155 only
}

enum Operation {
	Ask
	Offer
}

type Block @entity {
	id: ID!
	tokenId: BigInt!
	timestampt: Int!
	blockNumber: Int!
	event: EventType!
	address: String!
	from: String
	to: String
	quantity: BigInt
	price: BigInt
	quoteToken: String
}


type RoyaltiesRegistry @entity(immutable: true){
	id: ID!
	tokenId: String!
	account: String!,
	value: Int!
	collectionId: String!
	# royalties: [RoyaltyItem!]!
}

# type Statistic @entity {
# 	id: ID!
# 	totalNftListed: BigInt!
# 	totalVolume: BigInt!
# 	totalTransaction: BigInt!
# 	totalCollection: BigInt!
# 	totalProtocolFee: BigInt!
# }

type MarketVolume @entity{
	id: String!
	type: String!
	totalVolume: BigInt!,
}

type MarketFee @entity{
	id: String!
	type: String!
	totalFee: BigInt!,
}

enum ActionState {
  PENDING
  EXECUTED
}